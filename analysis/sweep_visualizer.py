#!/usr/bin/env python3
"""
Visualization tools for scenario sweeps.

This module provides functions to visualize and compare the results
of multiple scenarios generated by the scenario generator.
"""
import os
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from typing import Dict, List, Optional, Any


def load_scenario_metadata(file_path="results/generated_scenarios/generated_scenarios_metadata.json") -> Dict:
    """Load the metadata about generated scenarios."""
    with open(file_path, 'r') as f:
        return json.load(f)


def extract_scenario_data(metadata: Dict) -> pd.DataFrame:
    """Extract key data from scenario metadata into a DataFrame for visualization."""
    scenarios = []
    
    for scenario in metadata.get('scenarios', []):
        # Basic scenario info
        scenario_data = {
            'name': scenario.get('name', ''),
            'selection_score': scenario.get('selection_score', 0),
        }
        
        # Add metrics
        metrics = scenario.get('metrics', {})
        for metric_name, metric_value in metrics.items():
            scenario_data[metric_name] = metric_value
        
        # Add config summary
        config = scenario.get('config_summary', {})
        for config_name, config_value in config.items():
            if isinstance(config_value, dict):
                # For dictionaries like strategies, store as string
                scenario_data[f'config_{config_name}'] = str(config_value)
            else:
                scenario_data[f'config_{config_name}'] = config_value
        
        scenarios.append(scenario_data)
    
    return pd.DataFrame(scenarios)


def plot_scenario_scores(df: pd.DataFrame, top_n: int = 20, 
                         title: str = "Top Scenarios by Selection Score", 
                         save_path: Optional[str] = None):
    """Plot the selection scores of the top N scenarios."""
    plt.figure(figsize=(12, 8))
    
    # Sort by selection score and take top N
    plot_df = df.sort_values('selection_score', ascending=False).head(top_n)
    
    # Create the bar plot
    ax = sns.barplot(x='selection_score', y='name', data=plot_df, palette='viridis')
    
    # Add labels and title
    plt.title(title, fontsize=16)
    plt.xlabel('Selection Score', fontsize=12)
    plt.ylabel('Scenario', fontsize=12)
    
    # Add values to the bars
    for i, v in enumerate(plot_df['selection_score']):
        ax.text(v + 0.01, i, f"{v:.3f}", va='center')
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path)
        
    plt.show()
    

def plot_metric_comparison(df: pd.DataFrame, metric: str, 
                           top_n: int = 10, 
                           title: Optional[str] = None,
                           save_path: Optional[str] = None):
    """Plot a comparison of a specific metric across the top N scenarios."""
    plt.figure(figsize=(12, 8))
    
    # Sort by selection score and take top N
    plot_df = df.sort_values('selection_score', ascending=False).head(top_n)
    
    if not title:
        title = f"Comparison of {metric} Across Top {top_n} Scenarios"
    
    # Create the bar plot
    ax = sns.barplot(x=metric, y='name', data=plot_df, palette='coolwarm')
    
    # Add labels and title
    plt.title(title, fontsize=16)
    plt.xlabel(metric, fontsize=12)
    plt.ylabel('Scenario', fontsize=12)
    
    # Add values to the bars
    for i, v in enumerate(plot_df[metric]):
        ax.text(v + 0.01, i, f"{v:.3f}", va='center')
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path)
        
    plt.show()


def plot_metric_correlation(df: pd.DataFrame, 
                           title: str = "Correlation Between Metrics",
                           save_path: Optional[str] = None):
    """Plot a correlation matrix between different metrics."""
    # Filter for only numeric columns that are metrics
    metric_cols = [col for col in df.columns 
                  if col.startswith('avg_') or col == 'selection_score']
    
    # Calculate correlation matrix
    corr = df[metric_cols].corr()
    
    plt.figure(figsize=(12, 10))
    
    # Create a heatmap
    mask = np.triu(np.ones_like(corr, dtype=bool))
    sns.heatmap(corr, mask=mask, cmap='coolwarm', annot=True, 
                fmt=".2f", square=True, linewidths=.5)
    
    plt.title(title, fontsize=16)
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path)
        
    plt.show()


def plot_strategy_distribution(df: pd.DataFrame, 
                               title: str = "Strategy Distribution in Top Scenarios",
                               save_path: Optional[str] = None):
    """Plot the distribution of strategies in the top scenarios."""
    plt.figure(figsize=(14, 8))
    
    # Count strategy occurrences
    strategies = {}
    for _, row in df.iterrows():
        if 'config_strategies' in row:
            strat_dict = eval(row['config_strategies'])
            for strategy, count in strat_dict.items():
                if strategy not in strategies:
                    strategies[strategy] = 0
                strategies[strategy] += count
    
    # Create DataFrame for plotting
    strat_df = pd.DataFrame({
        'strategy': list(strategies.keys()),
        'count': list(strategies.values())
    })
    
    # Sort by count
    strat_df = strat_df.sort_values('count', ascending=False)
    
    # Create the bar plot
    ax = sns.barplot(x='strategy', y='count', data=strat_df, palette='Set3')
    
    # Add labels and title
    plt.title(title, fontsize=16)
    plt.xlabel('Strategy', fontsize=12)
    plt.ylabel('Total Count', fontsize=12)
    plt.xticks(rotation=45, ha='right')
    
    # Add values to the bars
    for i, v in enumerate(strat_df['count']):
        ax.text(i, v + 0.5, str(v), ha='center')
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path)
        
    plt.show()


def plot_parameter_frequency(df: pd.DataFrame, param_column: str,
                             title: Optional[str] = None,
                             save_path: Optional[str] = None):
    """Plot the frequency of different parameter values."""
    plt.figure(figsize=(12, 6))
    
    if not title:
        title = f"Frequency of {param_column} Values in Top Scenarios"
    
    # Count parameter occurrences
    param_counts = df[param_column].value_counts().reset_index()
    param_counts.columns = [param_column, 'count']
    
    # Create the bar plot
    ax = sns.barplot(x=param_column, y='count', data=param_counts, palette='pastel')
    
    # Add labels and title
    plt.title(title, fontsize=16)
    plt.xlabel(param_column, fontsize=12)
    plt.ylabel('Count', fontsize=12)
    
    # Add values to the bars
    for i, v in enumerate(param_counts['count']):
        ax.text(i, v + 0.1, str(v), ha='center')
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path)
        
    plt.show()


def create_scenario_comparison_report(metadata_path: str, output_dir: str = "analysis_results"):
    """Generate a comprehensive visual report comparing scenarios."""
    # Load the metadata
    metadata = load_scenario_metadata(metadata_path)
    df = extract_scenario_data(metadata)
    
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate plots
    plot_scenario_scores(df, save_path=os.path.join(output_dir, "scenario_scores.png"))
    
    # Plot key metrics
    metrics = ["avg_final_coop_rate", "avg_coop_rate_change", 
               "avg_score_variance", "avg_strategy_dominance"]
    
    for metric in metrics:
        if metric in df.columns:
            plot_metric_comparison(df, metric, 
                                  save_path=os.path.join(output_dir, f"{metric}_comparison.png"))
    
    # Plot correlations
    plot_metric_correlation(df, save_path=os.path.join(output_dir, "metric_correlation.png"))
    
    # Plot strategy distribution
    plot_strategy_distribution(df, save_path=os.path.join(output_dir, "strategy_distribution.png"))
    
    # Plot parameter frequencies
    param_columns = [col for col in df.columns if col.startswith('config_')]
    for col in param_columns:
        if df[col].nunique() < 10:  # Only plot if there aren't too many unique values
            plot_parameter_frequency(df, col, 
                                    save_path=os.path.join(output_dir, f"{col}_frequency.png"))
            
    # Save processed data for further analysis
    df.to_csv(os.path.join(output_dir, "scenario_comparison_data.csv"), index=False)
    
    print(f"Scenario comparison report generated in {output_dir}")
    return df


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Visualize and compare scenario sweep results")
    parser.add_argument("--metadata", type=str, default="results/generated_scenarios/generated_scenarios_metadata.json",
                       help="Path to the generated scenarios metadata JSON file")
    parser.add_argument("--output", type=str, default="analysis_results",
                       help="Directory to save analysis results")
    args = parser.parse_args()
    
    create_scenario_comparison_report(args.metadata, args.output)
